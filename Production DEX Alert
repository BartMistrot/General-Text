CREATE PROCEDURE dbo.dex_file_latency_threshold_exceeded AS
BEGIN
    -- Define the full query as a string
    DECLARE @query NVARCHAR(MAX) = '
    SELECT TOP 1 *
    FROM DEX_JMS_FC..dex_monitor
    WHERE transitdatetime > DATEADD(HOUR, -1, GETDATE())
    ORDER BY transitdatetime DESC
    ';
    
    -- Execute the query and store the result in a temporary table
    SELECT TOP 1 *
    INTO #temp
    FROM DEX_JMS_FC..dex_monitor
    WHERE transitdatetime > DATEADD(HOUR, -1, GETDATE())
    ORDER BY transitdatetime DESC;

    -- Check if any record was found
    IF EXISTS (SELECT 1 FROM #temp)
    BEGIN
        -- Get the ackDateTime and define the threshold time
        DECLARE @ackDateTime DATETIME;
        DECLARE @thresholdTime DATETIME;
        DECLARE @message VARCHAR(50);

        SELECT @ackDateTime = ackDateTime FROM #temp;
        SET @thresholdTime = DATEADD(HOUR, -1, GETDATE());  -- 1 hour threshold for production

        -- For testing purposes, you can adjust the threshold to 30 seconds:
        -- SET @thresholdTime = DATEADD(SECOND, -30, GETDATE());

        -- Determine if 'expired' or 'not expired'
        IF @ackDateTime < @thresholdTime
        BEGIN
            SET @message = 'expired';
        END
        ELSE
        BEGIN
            SET @message = 'not expired';
        END

        -- Return the message, comparison data, the full query, and the selected record in one result set
        SELECT 
            @message AS Message,
            @ackDateTime AS AckDateTime,
            @thresholdTime AS ThresholdTime,
            @query AS [Query],
            t.*
        FROM #temp t;
    END
    ELSE
    BEGIN
        -- No records found within the last hour
        DECLARE @thresholdTime DATETIME = DATEADD(HOUR, -1, GETDATE());  -- Ensure @thresholdTime is declared
        SELECT 
            'No records found within the last hour.' AS Message,
            NULL AS AckDateTime,
            @thresholdTime AS ThresholdTime,
            @query AS [Query];
    END

    DROP TABLE #temp;
END
