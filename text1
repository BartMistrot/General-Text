# Define the connection parameters
$server = "GHSMSOCDATA2"          # Replace with your server name
$username = "GHS_User"            # Replace with your username (if using SQL authentication)
$password = "Xtr3me#25!"          # Replace with your password (if using SQL authentication)

# Build the connection string
$connectionString = "Server=$server;User ID=$username;Password=$password;Trusted_Connection=False;"

try {
    # Create a new SQL Connection object
    $connection = New-Object System.Data.SqlClient.SqlConnection
    $connection.ConnectionString = $connectionString

    # Open the connection to the database
    $connection.Open()
    Write-Host "Connection to the database opened successfully." -ForegroundColor Green

    # SQL query
    $query = "select top(1) * from DEX_JMS_FC..dex_monitor where transitdatetime > DATEADD(HOUR, -1, GETDATE()) order by transitdatetime desc If (select count(status) from #temp) < 0 begin select 1 SELECT @@VERSION; end" 

    # Create a SQL Command object
    $command = $connection.CreateCommand()
    $command.CommandText = $query

    # Execute the query and load the results into a DataTable
    $dataAdapter = New-Object System.Data.SqlClient.SqlDataAdapter $command
    $dataTable = New-Object System.Data.DataTable
    $dataAdapter.Fill($dataTable) | Out-Null

    # Close the connection
    $connection.Close()
    Write-Host "Connection to the database closed." -ForegroundColor Green

    # Display the results
    Write-Host "Query Results:" -ForegroundColor Cyan
    $dataTable
}
catch {
    Write-Error "An error occurred: $_"
}


msgID            : EMS25390570_dexOutbound
activityOccured  : 20240918 11:10:35.000
transitDateTime  : 9/18/2024 11:10:43 AM
transmitDateTime : 9/18/2024 11:10:44 AM
ackDateTime      : 9/18/2024 11:10:44 AM
docsizeKB        : 53
status           : Ack received
duid             : 1.2.840.113782.1.3.1010801.167141.6135.20240918.58233509        
msgType          : MDM
docType          : EMERGENCY TRIAGE NOTE P
mrn              : 05618679
facility         : BRG
encounter        : 000102185139
udi              : 113620547
activity         : 1
event            : T02


--------------------------

CREATE PROCEDURE dbo.dex_file_latency_threshold_exceeded AS select top(1) * INTO #temp from DEX_JMS_FC..dex_monitor where transitdatetime > DATEADD(HOUR, -1, GETDATE()) order by transitdatetime desc -- select * from #temp If (select count(status) from #temp)<0 begin select 1 DECLARE @xml NVARCHAR(MAX) DECLARE @body NVARCHAR(MAX)

SET @xml = CAST(( SELECT [msgID] AS 'td','',[activityOccured] AS 'td','', [transitDateTime] AS 'td','', [transmitDateTime] AS 'td','', [ackDateTime] as 'td','', [docsizeKB] as 'td','', [status] as 'td','', [duid] as 'td','', [msgType] as 'td', [docType] as 'td','', [mrn] as 'td','', [facility] as 'td','', [encounter] as 'td','', [udi] as 'td','', [activity] as 'td','', [event] as 'td','' FROM #temp --ORDER BY [name] FOR XML PATH('tr'), ELEMENTS ) AS NVARCHAR(MAX))

SET @body ='<html><body><H3>JobStream Monitor Error Alert</H3> <table border = 1> <tr> <th> msgID </th> <th> activityOccured </th> <th> transitDateTime </th> <th> transmitDateTime </th> <th> ackDateTime </th> <th> status </th></tr>'

SET @body = @body + @xml +'</table></body></html>' EXEC msdb.dbo.sp_send_dbmail @profile_name = 'GHSMAIL', @recipients = 'IS-DBA@brgeneral.onmicrosoft.com',--;servicedesk@brgeneral.org;is-revenue-cycle@brgeneral.org', @body = @body, @body_format ='HTML', @subject = 'Please create a P2 and assign to BRG-REV - SOC - DEX File latency

Detected'; end else select 0 drop table #temp



------------------------






BEGIN
    -- Step 1: Select the most recent record within the last hour based on transitdatetime
    SELECT TOP 1 *
    INTO #temp_top1
    FROM DEX_JMS_FC..dex_monitor
    WHERE transitdatetime > DATEADD(HOUR, -1, GETDATE())
    ORDER BY transitdatetime DESC;

    -- Check if any record was found
    IF EXISTS (SELECT 1 FROM #temp_top1)
    BEGIN
        -- Step 2: Analyze the ackDateTime of the selected record
        DECLARE @message VARCHAR(50);
        DECLARE @ackDateTime DATETIME;
        DECLARE @thresholdTime DATETIME;

        SELECT @ackDateTime = ackDateTime FROM #temp_top1;

        -- Define the threshold time (e.g., 30 seconds ago for testing)
        SET @thresholdTime = DATEADD(SECOND, -30, GETDATE());

        -- Compare ackDateTime with the threshold
        IF @ackDateTime < @thresholdTime
        BEGIN
            SET @message = 'expired';
        END
        ELSE
        BEGIN
            SET @message = 'Not expired';
        END

        -- Return the message, comparison values, and the selected record
        SELECT 
            @message AS Message,
            @ackDateTime AS AckDateTime,
            @thresholdTime AS ThresholdTime,
            t.*
        FROM #temp_top1 t;

        -- Clean up temporary table
        DROP TABLE #temp_top1;
    END
    ELSE
    BEGIN
        -- No records found within the last hour
        SELECT 'No records found within the last hour.' AS Message;
    END
END




