NSGNPO_SSRSReport

  
/* -----------------------------------------  
-- Author:  Hardy T. Clark  
-- Created:  07/14/2023  
-- Purpose:  Select orders yesterday with NSGNPO order code for bot order mgmt.  
-- History:  
-- 07/14/2023 Hardy T Clark Initial Creation. Copied from [usp_brg2_orders_NSGNPO] for SSRS Report/Testing.  
*/ -----------------------------------------  
  
CREATE PROCEDURE [dbo].[usp_brg2_orders_NSGNPO_SSRSReport]    
AS  
  
---------- for testing  --------------------  
--DECLARE @SchedDt DATETIME = '2022-04-29'  
--------------------------------------------  
  
SELECT  
 x.*  
FROM  
 (  
  SELECT  
   --oh.vst_int_id ,  
   CASE   
    WHEN (admsvc.cod_dtl_ext_id <> 'M_PRH' AND SUBSTRING(admsvc.cod_dtl_ext_id,1,1) = 'M' AND SUBSTRING(admsvc.cod_dtl_ext_id,5,5) = 'H') THEN 'MC Acute'  
    WHEN admsvc.cod_dtl_ext_id = 'M_PRH' THEN 'MC'  
    WHEN (SUBSTRING(admsvc.cod_dtl_ext_id,1,1) = 'M' AND SUBSTRING(admsvc.cod_dtl_ext_id,5,5) <> 'H') THEN 'MC'  
    WHEN SUBSTRING(admsvc.cod_dtl_ext_id,1,2) = 'zM' THEN 'MC'  
    WHEN SUBSTRING(admsvc.cod_dtl_ext_id,1,1) = 'B' THEN 'BB'  
    WHEN SUBSTRING(admsvc.cod_dtl_ext_id,1,1) = 'A' THEN 'ASC'   
   END AS [Campus]  
   , TRIM(unit.loc_ds) AS [Unit]  
   , TRIM(room.loc_ds) AS [Room]  
   , TRIM(visit.med_rec_no) AS [MRN]  
   , TRIM(visit.vst_ext_id) AS [Visit ID]  
   , CONCAT(TRIM(ptpsn.lst_nm),', ',TRIM(ptpsn.fst_nm),' ',ISNULL(TRIM(ptpsn.mid_nm),'')) AS [Patient Name]  
   , CONVERT(VARCHAR(16),visit.adm_ts,120) AS [Admit Date]  
   , TRIM(patty.cod_dtl_ds) AS [Pt Type]  
   --, RTRIM(vststa.cod_dtl_ds) AS [VisitStatus]  
   , RTRIM(cg.car_gvr_ext_id) AS [Caregiver ID]  
   , CONCAT(TRIM(cgnm.lst_nm),', ',TRIM(cgnm.fst_nm),' ',ISNULL(TRIM(cgnm.mid_nm),'')) AS [Caregiver Name]  
     
   , CONVERT(VARCHAR(16),oh.entered_datetime_ts,120) AS [NSG NPO Order Dt]  
   , CONVERT(VARCHAR(16),oh.start_datetime_ts,120) AS [NSG NPO Order StartDt]  
   , oh.order_number AS [NSG NPO Order Nbr]  
   , RTRIM(oc.order_code_ext_id) AS [NSG NPO Order Cd]  
   , RTRIM(oc.order_code_desc1) AS [NSG NPO Order]  
   --, CONCAT(oh.spec_instructions_1,' ',oh.spec_instructions_2,' ',oh.spec_instructions_3) AS [Order Instruction]  
   , CASE WHEN dtorder.DietOrder IS NULL THEN 'No Order' ELSE TRIM(dtorder.DietOrder) END AS [DTY NPO Order]  
   , CONVERT(VARCHAR(16),dtorder.DietOrderStartDt,120) AS [DTY NPO Order StartDt]  
   , CASE WHEN (CAST(dtorder.DietOrderStartDt AS TIME) >= '00:00' AND CAST(dtorder.DietOrderStartDt AS TIME) < '01:00') THEN 'Y' ELSE 'N' END AS [Bot Y/N]  
   , COUNT(*) OVER(PARTITION BY visit.vst_ext_id ORDER BY visit.vst_ext_id , oh.entered_datetime_ts DESC) AS rowno  
  FROM   
   paragon.dbo.TPM300_PAT_VISIT visit  
   LEFT JOIN paragon.dbo.TSM040_PERSON_HDR ptpsn ON ptpsn.psn_int_id = visit.psn_int_id  
   LEFT JOIN paragon.dbo.TOM100_ORDER_HEADER oh ON oh.vst_int_id = visit.vst_int_id  
   LEFT JOIN paragon.dbo.TOM101_ORDER_DETAIL od ON od.ord_int_id = oh.ord_int_id   
   INNER JOIN paragon.dbo.TOM200_ORDER_CODE oc ON oc.order_code_int_id = od.order_code_int_id  
   INNER JOIN paragon.dbo.TPM100_CARE_GIVER cg ON cg.car_gvr_int_id = oh.car_gvr_int_id   
   LEFT JOIN paragon.dbo.TSM040_PERSON_HDR cgnm ON cgnm.psn_int_id = cg.psn_int_id   
   LEFT JOIN paragon.dbo.TSM180_MST_COD_DTL vststa ON vststa.cod_dtl_int_id = visit.vst_sta_cd  
   LEFT JOIN paragon.dbo.TSM180_MST_COD_DTL admsvc ON admsvc.cod_dtl_int_id = visit.adm_srv_cd  
   LEFT JOIN paragon.dbo.TSM180_MST_COD_DTL patty ON patty.cod_dtl_int_id = visit.pat_ty  
   LEFT JOIN paragon.dbo.TSM950_LOCATION_REF unit ON unit.loc_int_id = visit.loc_lvl_3_id  
   LEFT JOIN paragon.dbo.TSM950_LOCATION_REF room ON room.loc_int_id = visit.loc_lvl_4_id  
   OUTER APPLY  
    (  
     SELECT TOP 1  
      dod.vst_int_id , oc.order_code_desc1 AS DietOrder , dod.start_datetime_ts AS DietOrderStartDt   
     FROM paragon.dbo.TOM103_DIET_ORDER_DETAIL dod   
      LEFT JOIN paragon.dbo.TOM200_ORDER_CODE oc ON oc.order_code_int_id = dod.order_code_int_id  
     WHERE   
      dod.vst_int_id = visit.vst_int_id  
      AND dod.order_code_int_id IN (1612,17370,1613,17351,12272) --> DIET NPO, DIET NPO AFTER 11pm, DIET NPO AFTER MIDNIGHT, DIET NPO EXCEPT MEDS, DIET NPO UNTIL SWALLOW SCREEN PASS  
      --AND dod.dtl_sta_cd NOT IN ('D','S','X')     --> D = Discontinue, S = Suspend, X = Canceled   
      AND dod.start_datetime_ts >= oh.entered_datetime_ts  
     ORDER BY dod.start_datetime_ts ASC  
    ) dtorder  
  WHERE --1=1  
   visit.org_int_id = 278  
   AND visit.vst_sta_cd = 4742            --> Admit                                     
   AND oc.order_code_ext_id IN ('NSGNPO' , 'NSGTD5')      --> Nursing Order NPO After MN , NPO EXCEPT MEDS AFTER MIDNIGHT  
   AND CAST(oh.entered_datetime_ts AS DATE) = CAST(GETDATE() -1 AS DATE) --> BOT runs at 00:01, only get orders entered yesterday at the 00:01 time.  
   AND oh.ord_sta_cd NOT IN ('X', 'S', 'D')        --> X = Cancelled, S = Suspeneded, D = Discontinued  
   AND (ptpsn.lst_nm IN ('TEST','DMR','UPGRADE','WEBSTATION','ZZTEST') AND ptpsn.lst_nm NOT LIKE 'LEAPFROG%')  
   --AND NOT EXISTS             
   -- (  
   --  SELECT dod.vst_int_id  
   --  FROM paragon.dbo.TOM103_DIET_ORDER_DETAIL dod   
   --   LEFT JOIN paragon.dbo.TOM200_ORDER_CODE oc ON oc.order_code_int_id = dod.order_code_int_id  
   --  WHERE dod.vst_int_id = visit.vst_int_id  
   --   AND dod.order_code_int_id IN (1612,17370,1613,17351,12272) --> DIET NPO, DIET NPO AFTER 11pm, DIET NPO AFTER MIDNIGHT, DIET NPO EXCEPT MEDS, DIET NPO UNTIL SWALLOW SCREEN PASS  
   --   AND dod.dtl_sta_cd NOT IN ('D','S','X')      --> A = Active, C = Dates Met, D = Discontinue, F = Future, S = Suspend, T = Today, X = Canceled   
   -- )  
   --and vst_ext_id = '000101967317'  
 ) x  
WHERE  
 x.rowno = 1


_------------------------------------------



. Verify Basic Execution
First, ensure that the stored procedure runs without parameters. You already executed the procedure using:

sql
Copy code
EXEC dbo.usp_brg2_orders_NSGNPO_SSRSReport;
This is the correct syntax if the procedure doesn't require any parameters. If no errors were shown and only the headers appeared, this confirms that the procedure runs but doesnâ€™t return any rows. Next, we'll investigate why.

2. Check for Data in Related Tables
A likely reason for only seeing headers is that the underlying data might not meet the filtering conditions in the WHERE clauses of the stored procedure. To troubleshoot, you need to run individual parts of the query.

Step 2.1: Check for Data in the Orders Table (Basic Data Check)
To check if there is any data in the core table(s), run a simplified version of the SELECT query used in the procedure. Start by removing all filters:

sql
Copy code
SELECT TOP 10 
    oh.entered_datetime_ts,
    oc.order_code_ext_id,
    visit.vst_ext_id
FROM 
    paragon.dbo.TOM100_ORDER_HEADER oh
    JOIN paragon.dbo.TOM101_ORDER_DETAIL od ON od.ord_int_id = oh.ord_int_id
    JOIN paragon.dbo.TPM300_PAT_VISIT visit ON visit.vst_int_id = oh.vst_int_id
    JOIN paragon.dbo.TOM200_ORDER_CODE oc ON oc.order_code_int_id = od.order_code_int_id;
This query will help verify if the Orders, Order Details, and Patient Visit tables contain any data.

Step 2.2: Check Specific Conditions Used in the Stored Procedure
Now, run a more focused query to see if any rows match the conditions used in the stored procedure (such as filtering by NSGNPO order code or by yesterday's date). This is a crucial step to ensure that data exists for the specific conditions the procedure is querying.

sql
Copy code
SELECT TOP 10 
    oh.entered_datetime_ts,
    oc.order_code_ext_id,
    visit.vst_ext_id
FROM 
    paragon.dbo.TOM100_ORDER_HEADER oh
    JOIN paragon.dbo.TOM101_ORDER_DETAIL od ON od.ord_int_id = oh.ord_int_id
    JOIN paragon.dbo.TPM300_PAT_VISIT visit ON visit.vst_int_id = oh.vst_int_id
    JOIN paragon.dbo.TOM200_ORDER_CODE oc ON oc.order_code_int_id = od.order_code_int_id
WHERE 
    oc.order_code_ext_id IN ('NSGNPO', 'NSGTD5')  -- These are the specific order codes the procedure is looking for
    AND CAST(oh.entered_datetime_ts AS DATE) = CAST(GETDATE() - 1 AS DATE);  -- Orders entered yesterday
This will help determine whether the specific orders and conditions exist for the date in question.

3. Test the Stored Procedure Without Filters
You need to determine whether the stored procedure's filters are preventing data from being returned. To test this, run the stored procedure after relaxing or removing the filtering conditions.

Step 3.1: Test Without Date Filter
Comment out the AND CAST(oh.entered_datetime_ts AS DATE) = CAST(GETDATE() - 1 AS DATE) line to ensure the stored procedure is not restricting results to a particular date. You can temporarily modify the stored procedure if you have permissions:

sql
Copy code
-- Original stored procedure logic:
-- AND CAST(oh.entered_datetime_ts AS DATE) = CAST(GETDATE() - 1 AS DATE)

-- Temporary modification:
AND CAST(oh.entered_datetime_ts AS DATE) >= '2023-01-01'
This will ensure you're querying data beyond just "yesterday," in case there were no records for that specific date.

Step 3.2: Test Without Order Code Filter
Similarly, comment out the oc.order_code_ext_id IN ('NSGNPO', 'NSGTD5') condition to see if the issue is with the filtering by order codes.

sql
Copy code
-- Original:
-- AND oc.order_code_ext_id IN ('NSGNPO', 'NSGTD5')

-- Temporary modification:
-- Comment this line out or remove it entirely for now
4. Check for Suppressed Output (Row Filters)
The stored procedure includes a filter to only return the first row (x.rowno = 1) for each visit. It's possible this filter is unintentionally suppressing rows that would otherwise be returned.

Step 4.1: Remove Row Filter
To test this, temporarily remove or comment out the row filter in the stored procedure:

sql
Copy code
-- Original:
-- WHERE x.rowno = 1

-- Temporary modification:
-- Comment this line out or remove it entirely for now
This will ensure that all rows are returned, not just the first one for each visit.

5. Run the Stored Procedure Again
After making the above adjustments (such as removing filters), run the stored procedure again to see if it returns data:

sql
Copy code
EXEC dbo.usp_brg2_orders_NSGNPO_SSRSReport;
If it returns data after removing or relaxing the filters, this confirms that one or more of the filters is too restrictive and needs adjustment.

6. Final Debugging
Once you've identified which part of the query is causing the blank result, you can start narrowing down the conditions:

Reintroduce one filter at a time (e.g., start with the date filter, then add back the order code filter, and finally add back the row filter).
Check data consistency: Make sure that there is indeed data for the relevant conditions (specific dates, order codes, patient visits, etc.).
Summary of Steps:
Verify Basic Execution: Make sure you are executing the procedure correctly with EXEC.
Check Data in Tables: Run individual queries to check whether data exists in the underlying tables.
Remove/Relax Filters:
Remove the date filter and order code filter to see if data is being filtered out unnecessarily.
Remove Row Filtering (x.rowno = 1) to ensure no rows are suppressed.
Re-run the Stored Procedure to check if the issue is resolved.
Reintroduce Filters Gradually to isolate which condition is causing the problem.
Let me know if any of these steps reveal the source of the issue, or if you need further assistance!
